const app = require('../src/server')
let debug = require('debug')
let http = require('http');
const socket = require('socket.io')
// require('../src/config/database')


const port = portNormalize(process.env[process.env.ENV + '_PORT']);
app.set('port', port)

let server = http.createServer(app)
const io = socket(server, { cors: { origin: "*" } });
require("../src/chat/chat")(io);



server.listen(port)
server.on("error",onError)
server.on("listening",onListening)

function portNormalize(value) {
    let port = parseInt(value, 10);
    if (isNaN(port)) {
        return value;
    }

    if (value >= 0) {
        return port
    }

    return false
}


function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }
  
    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;
  
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }


  
function onListening() {
    var addr = server.address();

    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
   debug('Listening on ' + bind);
  }